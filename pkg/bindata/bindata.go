// Code generated by go-bindata.
// sources:
// config/app.ini
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configAppIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\xcd\x6e\xd3\x40\x10\xc7\xef\xf3\x14\x23\x4b\xdc\x50\xec\x24\xa5\x69\x6b\xf9\xe0\xda\x2b\xc5\x4a\xfc\xd1\xec\xba\x2d\x44\x91\xb5\xad\xb7\xa9\x8b\x9d\x4d\xd6\x4e\x82\x38\x15\x89\x2b\xa2\x87\x0a\x89\x03\x77\x5e\x80\x4b\xc5\xeb\xa4\xc0\x5b\x20\xbb\xa1\x7c\x48\x68\x0f\x33\xfa\xcf\x6f\x76\x46\xf3\x37\x71\x73\x77\xfb\xed\xf6\xf3\xe6\xe6\x1d\xd8\x51\x94\x04\xb6\x4f\xd0\xc2\x76\x77\x7f\x99\x82\x89\x9b\xf7\x1f\x36\xd7\x5f\x51\x4b\xc5\x4a\x7b\x8a\xda\x5c\xc9\x54\x43\xa9\x50\xab\x44\x59\x69\x30\x8a\x83\xc4\x0f\xdd\xba\x23\x15\x2b\x30\xf1\xc7\xa7\x8f\xf7\xd7\x6f\xbe\x7f\x79\x7b\x7f\x77\x03\x26\x65\x36\xf3\x9c\xc4\x0d\x7d\xdb\x0b\xd0\xc2\xcb\xaa\x9a\x1f\xe8\x7a\x2e\xcf\x79\x7e\x29\xcb\xea\x60\xaf\xdd\xdd\xd7\xcb\x8a\x57\xd9\x39\xfc\x07\x7e\xa8\xb6\x9a\x85\x5a\xe7\xb2\x00\x18\x97\x42\xad\x84\x9a\x80\xf9\xc8\xae\xd7\xeb\x3f\x88\x47\xf9\xef\x41\xd0\x67\x2c\x4a\x6c\xd7\x1d\xa1\x85\x46\xab\x79\x0f\x5a\x14\x8e\x18\x5a\xd8\x40\x30\x4e\x79\xc5\xcf\x78\x29\x26\xd0\x0f\x69\xad\xb7\x3b\x46\xab\xd7\x6b\x75\x8c\x5e\x6b\xc7\x38\xe8\x76\x8d\x5d\x30\xb7\xa5\xed\x37\x0f\xe2\xf6\x76\xeb\x57\x7c\x3e\x87\x98\x92\x7a\x8e\x92\xb2\x82\xc8\xa6\xf4\xc4\x45\x6b\x96\x2d\x67\xd9\xb2\x63\xb4\xf7\xc0\xfc\xa5\x35\x00\x8c\x73\x39\x9d\x80\x89\x5a\x9a\x95\xfc\x2c\x17\xf5\xb1\x2f\x78\xc5\xf3\x3a\x11\x4a\x49\x55\x27\x6b\xae\x66\x75\xcc\x66\x17\xb2\x8e\xa9\x38\x5b\x4e\x35\x18\x92\x63\x32\x44\x0b\x1b\x0e\x60\xbc\xc8\x66\xd9\x72\x02\x87\xb1\x33\x20\xec\x71\x21\xdb\x71\x08\xa5\xc9\x80\x3c\x47\x0b\x49\x71\xb8\x47\xaf\x52\xb9\xd3\x9f\x2e\x7c\x67\xc7\x9f\x09\x5f\x45\xc4\x0d\x06\x79\x27\x48\xa3\xcb\xd7\x45\x5f\x5e\x95\x42\x2c\x80\x12\x67\x44\xd8\xb6\x2b\x77\x7c\x6f\xa5\xb8\xf7\xb2\x9d\x87\xb9\x33\x97\x43\x66\xa8\xbc\xbd\x7b\x74\xa4\x62\x23\x2e\x4e\xe9\xf1\x3e\x3b\xe2\xd3\x65\x07\x22\x2f\x22\x43\x2f\x20\x68\x41\x44\x46\xd4\xa3\x8c\x04\x2c\x09\x23\x8a\x16\x66\x05\x9f\x8a\xe3\x4c\xac\x3b\xba\xa1\x2f\xf4\xde\x33\xf8\xd7\xf2\xac\x98\xfe\x76\x53\x7f\x52\x36\x96\xcb\x09\x1c\xda\x9e\x1b\x27\x51\x4c\xfb\x09\x0b\x07\xa4\xee\x78\x71\x72\x6a\xe4\xb1\x08\x8a\x51\xe6\x56\x72\x71\xf5\x33\x00\x00\xff\xff\xe7\x6d\xa3\xf0\xcf\x02\x00\x00")

func configAppIniBytes() ([]byte, error) {
	return bindataRead(
		_configAppIni,
		"config/app.ini",
	)
}

func configAppIni() (*asset, error) {
	bytes, err := configAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/app.ini", size: 719, mode: os.FileMode(420), modTime: time.Unix(1524381225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/app.ini": configAppIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{configAppIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

